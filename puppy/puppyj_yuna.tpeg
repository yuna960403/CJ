/**
 * Puppy Grammar
 * Authors:
 *   Kimio Kuramitsu (https://github.com/kkuramitsu/)
 */
 // pegtree pasm -g puppy3.tpeg parser.ts > puppy-parser.ts

example Source '''
from puppy import *
def cat_clicked(cat): print('Meaw')
cat = Circle(500, 500, clicked=cat_clicked)
'''

/* Top Level */

Source = EOL? {
    (Statement (";" Statement)* ";"? EOL)*
    #Source
} EOF

/* Code Layout */

EOF          = !.
LF           = '\n' / EOF
S            = [ \t\u200B\v\r　]

_            = ( S / BLOCKCOMMENT / LINECOMMENT )*
__           = ( S / '\n' / BLOCKCOMMENT / LINECOMMENT )*
SPC          = ( S / BLOCKCOMMENT / LINECOMMENT )+

BLOCKCOMMENT = '/*' ( !'*/' . )* '*/'
LINECOMMENT  = [#＃] ( !LF . )*

EOL          = _ LF (_ LF)*
INDENT       = '\n' [ \t　]+

Statement = 
    / ClassDecl
    / ImportDecl
    / FromImportDecl
    / FuncDecl
    / IfStatement
    / ForStatement
    / WhileStatement
    / ControlStatement 
    / AssignmentStatement
    / Expression

Block = {
    @scope(
        @symbol(INDENT) (Statement (";" Statement)* ";"? / _ &EOL)
        (@match(INDENT) (Statement (";" Statement)* ";"? / _ &EOL) )*
    )
    #Block
}

/* import */

ImportDecl = {
    "import" 
    name: Name 
    ("as" alias: Name)?
    #ImportDecl
}

FromImportDecl = {
    "from" 
    name: Name 
    "import"
    names: ({ Name (',' _ Name)* } / {'*' _})
    #FromDecl
}

/* class 定義 */

example ClassDecl,Statement '''
class Ball(Circle):
    width = 80
    heigh = 80
'''

ClassDecl = {
    'class' S _ 
    name: Name 
    ("(" extends: Name ")")? ":"
    (Block / Statement)
    #ClassDecl
}

/* 関数定義 */

example Statement '''
@clicked(A)
def succ(x: int):
    #hoge
    return x+1
'''

FuncDecl = {
    (deco: Decorator)?
    (async: "async")?
    "def" 
    name: Name 
    params: FuncParams ":"
    body: (Block / Statement)
    #FuncDecl
}

Decorator = {
    '@'
    name: Name
    ("(" params: Arguments ")")? __
    #Decorator
}

FuncParams = {
    "(" FuncParam? ( "," __ FuncParam )* __ ")"
    #FuncParam
}

FuncParam = {
    name: Name 
    ( ":" type: Type)?
    ( "=" value: Expression)?
    #Param
}

example Lambda lambda: print(1)
example Lambda lambda x: print(x)
example Lambda lambda x,y: print(x,y)

LambdaExpression = {
    "lambda" 
    (params: LambdaParams)? ":"
    body: (Block / Expression)
    #FuncExpr
}

LambdaParams = {
    Name? ( "," Name )*
    #Param
}

ControlStatement =
    / ReturnStatement
    / BreakStatement
    / ContinueStatement
    / PassStatement
    / YieldStatement

ReturnStatement = {
    "return"
    (expr: (Expressions / Expression) )?
    #Return
} 

YieldStatement = { "yield" #Yield } 
PassStatement =  { "pass" #Pass }
BreakStatement = { "break" #Break }
ContinueStatement = { "continue" #Continue }

/* if文 */

example Statement '''
if A == 1 :
    print(A)
    A = Ball()
else:
    print(A, B)
    
    A = 2
'''

example Statement '''
if A :
    A
elif B :
    B
elif C :
    C
else :
    D
'''

IfStatement = {
    "if" 
    cond: Expression ":"
    then: (Block / Statement)
    (elif: ElifStatements)?
    (else: ElseStatement)?
    #If
} /IfStatementJ

IfStatementJ = {
    "もし"
    cond: Expression "ならば"
    then: (Block / Statement)
    (elif: ElifStatements)?
    (else: ElseStatement)?
    #If
}

ElifStatements = {
    ElifStatement+
}

ElifStatement = {
    (@match(INDENT) / LF)
    "elif" 
    cond: Expression ":"
    then: (Block / Statement)
    #Elif
}

ElseStatement = {
    (@match(INDENT) / LF)
    "else" ":"
    (Block / Statement)
    #Else
}

/* for文 (* *) */

example Statement '''
for x in [1,2,3]:
    print(x)
    print(x+1)
'''

ForStatement = {
    "for" 
    each: Name 
    "in" 
    list: Expression ":"
    body: (Block / Statement)
    (else: ElseStatement)?
    #For
}

WhileStatement = {
    "while"
    cond: Expression ":"
    body: (Block / Statement)
    (else: ElseStatement)?
    #While
}

/* Assignment */

AssignmentStatement =
    / MultiAssignment
    / VarDecl
    / Assignment
    / SelfAssignment

example Statement a,b = b,a

MultiAssignment = {
    left: { LeftHand ("," LeftHand)+ }
    "=" 
    right: (Expressions / Expression)
    #MultiAssignment
}

LeftHand =
    Name (
	     { recv:^ "." name: Name #GetExpr }
    	/ { recv:^ "[" index: Expression "]" #IndexExpr }
    )*

Expressions = {
    Expression ("," Expression)+ 
    #Tuple
}

example Statement a = 1
example Statement a[0] = 1
example Statement A += 1

VarDecl = {
    (anno: Decorator)?
    (type: VarType)?
    left: Name
    "=" 
    right: Expression
    #VarDecl
}

VarType = { 'const'/'let'/'var' } !W _

Assignment = {
    left: LeftHand
    ":"? "=" 
    right: Expression
    #Assignment
}

SelfAssignment = {
    left: LeftHand
    name: SelfAssignOp
    right: Expression
    #SelfAssignment
}

SelfAssignOp = {
    ('<<' / '>>' / '**' / '//' / [+=*/%&|^＋＝＊／％＆｜＾×÷]) ('='/'＝')
} _

/* Expression */

example Expression not 1 == 2
example Expression not 1 == 2 and 1 > 3

Expression = Operator {
    then:^  
    "if" cond: Expression 
    "else" else: Expression 
    #IfExpr 
}?

BUGS = [)\]} ）］｝　]*

Operator =
	AndExpr (left:^ { OR _ right: AndExpr #Or })*

OR = 'or' !W / '||' / '｜｜'

AndExpr =
	NotExpr (left:^ { AND _ right: NotExpr #And })*

AND = 'and' !W / '&&' / '＆＆'

NotExpr =
	{ NOT _ NotExpr #Not } / EqExpr

NOT = 'not' !W / '!' / '！'

EqExpr =
	SumExpr (left:^ { name: { EQ #Name } _ right: SumExpr #Infix })*

EQ =
	/ '==' !'=' / '＝＝' !'＝'
	/ '!=' !'=' / '！＝' !'＝'
	/ '<=' !'=' / '＜＝' !'＝'
	/ '>=' !'=' / '＞＝' !'＝'
	/ '<'  !'<' / '＜' !'＜'
	/ '>'  !'>' / '＞' !'＞'
    / '=' !'='  / '＝' !'＝'
    / 'in' !W

SumExpr =
	ProdExpr (left:^ { name: { SUM #Name } _ right: ProdExpr #Infix })*

SUM = [+\-|＋ー｜]

ProdExpr =
	PowExpr (left:^ { name: { PROD #Name } _ right: PowExpr #Infix })*

PROD =
    / '//' / '<<' / '>>' / '／／' / '＜＜' / '＞＞'
	/ [*/%^&＊・／％＾＆×÷]

PowExpr = UnaryExpr (left:^ { name: { '**' #Name } _ right: UnaryExpr #Infix })*

UnaryExpr
	= { name: {PRE #Name } _ expr: UnaryExpr #Unary }
    / SuffixExpr

PRE = [+\-~＋ー〜]

SuffixExpr =
	Primary (
	    recv:^ { "." name: Name "(" params: Arguments __ ")" #MethodExpr }
	    / recv:^ { "." name: Name #GetExpr }
	    / name:^ { "(" params: Arguments __ ")"  #ApplyExpr }
        / recv:^ { "[" (left: Expression)? ":" (right: Expression)? "]" #Slice }
	    / recv:^ { "[" index: Expression "]" #IndexExpr }
	)*

example Expression a[1:2]
example Expression a[1:]
example Expression a[:2]

Arguments = {
	( !(NAME _ '=') Expression)? 
    ( "," __ !(NAME _ '=') Expression )*
    NamedArguments?
    #Arguments
}

NamedArguments = {
    ("," __ )?
    NamedArgument ( "," __ NamedArgument )*
    #Data
}

NamedArgument = {
    name: Name
    "=" 
    value: Expression
    #KeyValue
}

example Expression Circle(500, 500)
example Expression Circle(500, 500, clicked=cat_clicked)
example Expression Circle(clicked=1, move=1)

/* Primary */

example Primary, Expression (1,2) //
example Primary, Expression (1)
example Primary, Expression [1,2,3]
example Primary, Expression '''
{ 
    name: 'naruto', 
    "age": 17,
}
'''

Primary =
    / NLExpr
    / GroupExpr
    / ListExpr
    / DataExpr
    / Constant
    / Name

NLExpr = '(*' _ { (!(S* '*)') .)+ #NLExpr } S* '*)' _

GroupExpr = { "(" Expression ("," __ Expression)*  __ ")" #Tuple }

ListExpr = { "[" (Expression ("," __ Expression)* )? ","?  __ "]" #List }

DataExpr = { "{" (KeyValue ("," __ KeyValue)*)? ","? __ "}" #Data }

DELIM = [.:+\-*/%<>=!(){}[\],\n]

example GroupExpr （1, (1）)= 
example GroupExpr (1,(2))= 

KeyValue = {
	name: (Name/StringExpr/CharExpr)
	":"
	value: Expression
	#KeyValue
}

/* Type */

"[<" = [<[［＜] _
">]" = [\]>］＞] _
"->" = [=-] '>' _

Type = FuncType {^ ("|" Type)+ #UnionType }?

FuncType = PrimaryType {^ "->" Type #FuncType }*

PrimaryType =
    / { "(" (Type ("," Type)*)? ")" #TupleType } _ParamType*
    / { NAME #BaseType } _ _ParamType*

_ParamType = {^ "[<" (Type ("," Type)*)? ">]" #ParamType }

/* Name, Identifier */

Name = 
    / Identifier 
    / Defined
    / UIdentifier

NAME = [A-Za-z_] W*

Identifier = {
    NAME
    #Name
} _

Defined = '「' { (!'」' .)+ #Name } '」'

UIdentifier = {
    (KATA / KANJI / HIRA / '_')+ W*
    #UName
} _

W = [A-Za-z0-9_]

/***
RAWREF    = (!'」' .)+
RESERVE   = '「' @def(RAWREF) '」'
UNDEFINED = W (W/DIGIT)*

REF =
    / ADJECTIVE REF
    / RESERVE
    / @in(RAWREF)
    / RESERVED
    / UNDEFINED
**/

/* Literal */

Constant =
    / FormatString
    / LongString
	/ StringExpr
	/ CharExpr
	/ Number
	/ TrueExpr
	/ FalseExpr
	/ NullExpr

example Expression f'{a}+{1}'

FormatString = [Ff] (
    '\'\'\'' { FormatContent3* #Format } '\'\'\''
    / '\'' { FormatContent1* #Format } '\''
    / '"""' { FormatContent3D* #Format } '"""'
    / '"' { FormatContent1D* #Format } '"' ) _

FormatContent3 =
    '{' Expression '}' / { (!'\'\'\'' !'{' .)* #StringPart }

FormatContent1 =
    '{' Expression '}' / { (!'\'' !'{' .)* #StringPart }

FormatContent3D =
    '{' Expression '}' / { (!'"""' !'{' .)* #StringPart }

FormatContent1D =
    '{' Expression '}' / { (!'"' !'{' .)* #StringPart }

LongString = 
    '\'\'' { '\'' ( ESCAPE / ![\\'] . / !'\'\'\'' '\'' )* '\'' #MultiString } '\'\'' _
    / '""' { '"' ( ESCAPE / ![\\"] . / !'"""' '"' )* '"' #MultiString } '""' _

StringExpr = 
    / { '"' STRING* '"' #QString } _
    / DQ { ZSTRING* #ZString } DQ _

CharExpr = 
    / { '\'' CHAR* '\'' #QString } _
    / SQ {  ZCHAR* #ZChar } SQ _

SQ = ['’‘＇]
DQ = ["”“＂]
STRING = ESCAPE / ![\"\n\\] .
CHAR   = ESCAPE / !['\n\\] .
ZSTRING = ESCAPE / !DQ ![\n\\] .
ZCHAR   = ESCAPE / !SQ ![\n\\] .

ESCAPE =
	'\\' ['\"\\bfnrt]
	/ '\\' [0-3] [0-7] [0-7]
    / '\\' [0-7] [0-7]
    / '\\' [0-7]
	/ '\\' [uU] HEX HEX HEX HEX

/* Number,Unit */

Number = FloatExpr / IntExpr

IntExpr = {
	(HEXADECIMAL / BINARY / DECIMAL )
	#Int
} _

DECIMAL = !'_' DIGIT ( DIGIT )*
HEXADECIMAL = '0' [xX] HEX ( '_'* HEX )*
BINARY = '0' [bB] [01] ( '_'* [01] )*
DIGIT = [0-9０-９_]
HEX = [a-fA-F0-9]
LONG_SUFFIX = [lL]

FloatExpr = {
	FLOAT #Double
} _

FLOAT = !'_' (
	FRACTION EXPONENT? / DIGIT+ EXPONENT
)

FRACTION =
	/ DIGIT* "." !'_' DIGIT+
    / DIGIT DIGIT* "." !'.'

EXPONENT =
	[eE] [+\-]? !'_' DIGIT+

/* Const */

TrueExpr  = { [Tt] 'rue' #TrueExpr } _
FalseExpr = { [Ff] 'alse' #FalseExpr } _
NullExpr  = { ('None' / 'null') #Null } _

/* Character */

HIRA = [ぁ-ん]
KATA = [ァ-ヶ]
KANJI = [㐀-䶵一-龠々〇〻ー]
TENIWOHA = [はがもをとにへまか]

//W     = [ァ-ヶ㐀-䶵一-龠々〇〻Ａ-Ｚー]
//DIGIT = [０-９]

"{" = [{｛] __
"}" = [}｝] _
"[" = [[［] __
"]" = [\]］] _
"(" = [(（] __
")" = [)）] _
"=" = [=＝] ![=＝] _
"." = [.．。] _
"," = [,，、] _
";" = ([;；] _)+
":" = [:：] _
"_" = [_＿]

example Source '''
World(1600, 900, background="white");
​
Rectangle(800, 900, width=1600, height=100, isStatic=true)
​
for x in range(100, 701, 100):
    Rectangle(x*1.5, 100, width=40, height=300)
​
Rectangle(100, 200, width=200, height=200)

'''

example Source '''
a=1;b=1
'''

example Source if a = b and b = c: pass

example Expression (* 考える *)
example Expression しきい値
